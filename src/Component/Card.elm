module Component.Card
    exposing
        ( Card
        , decoder
        , toHtml
        , query
        , load
        , order
        )

{-| Component.Card represents an individual card.


# Types

@docs Card


# Build


# Encoders/Decoders

@docs decoder


# Views

@docs toHtml


# Query

@docs query, load


# Sorting

@docs order

-}

import Html exposing (Html, div, img, text, a)
import Html.Attributes exposing (class, src, href)
import Json.Decode exposing (int, string, nullable, field, maybe, at, Decoder)
import Json.Decode.Pipeline exposing (decode, required, custom, optional, optionalAt)
import Compare exposing (Comparator)
import GraphQl as Gql exposing (Value, Query, Anonymous, Request)
import Html.Helpers
import Component.Card.MP as CardMP exposing (MP)
import Component.Card.UID as CardUID exposing (UID)
import Component.Card.Set as CardSet exposing (Set)
import Component.Card.Rank as CardRank
import Component.Card.Type as CardType exposing (Type(Character, Event, Battle))
import Component.Card.Stats as CardStats exposing (Stats)
import Component.Card.Trait as CardTrait exposing (Trait)
import Component.Card.Effect as CardEffect exposing (Effect)
import Component.Card.Rarity as CardRarity exposing (Rarity)
import Component.Card.Preview as CardPreview exposing (Preview)


{-| A full card.
-}
type alias Card =
    { uid : UID
    , set : Set
    , number : Int
    , rarity : Rarity
    , title : String
    , subtitle : Maybe String
    , card_type : Type
    , trait : Trait
    , mp : MP
    , effect : Effect
    , stats : Stats
    , image_url : String
    , preview : Maybe Preview
    }


{-| Decode a string into a Card.
-}
decoder : Decoder Card
decoder =
    decode Card
        |> required "uid" CardUID.decoder
        |> required "set" CardSet.decoder
        |> required "number" int
        |> required "rarity" CardRarity.decoder
        |> required "title" string
        |> optional "subtitle" (maybe string) Nothing
        |> required "type" CardType.decoder
        |> required "trait" CardTrait.decoder
        |> required "mp" CardMP.decoder
        |> required "effect" CardEffect.decoder
        |> custom CardStats.decoder
        |> required "imageUrl" string
        |> optional "preview" (maybe CardPreview.decoder) Nothing


{-| Render a Card as an Html view.
-}
toHtml : Card -> Html msg
toHtml card =
    div [ class "card-details" ]
        [ toTitle card
        , CardMP.toHtml card.mp
        , CardTrait.toHtml card.trait
        , CardEffect.toHtmlLazy card.effect
        , CardStats.toHtml card.stats
        ]


{-| Generate a GraphQL query for a card by UID.
-}
query : UID -> Value Query
query uid =
    Gql.field "Card"
        |> Gql.withArgument "uid" (CardUID.toString uid |> Gql.string)
        |> Gql.withSelectors
            [ Gql.field "uid"
            , Gql.field "set"
            , Gql.field "number"
            , Gql.field "rarity"
            , Gql.field "mp"
            , Gql.field "type"
            , Gql.field "title"
            , Gql.field "subtitle"
            , Gql.field "trait"
                |> Gql.withSelectors
                    [ Gql.field "name"
                    ]
            , Gql.field "effect"
                |> Gql.withSelectors
                    [ Gql.field "symbol"
                    , Gql.field "text"
                    ]
            , Gql.field "stats"
                |> Gql.withSelectors
                    [ Gql.field "type"
                    , Gql.field "rank"
                    ]
            , Gql.field "imageUrl"
            , Gql.field "preview"
                |> Gql.withSelectors
                    [ Gql.field "previewer"
                    , Gql.field "previewUrl"
                    ]
            ]


{-| Fetch a Card using a query generated by query.
-}
load : Value Query -> Request Query Anonymous Card
load query =
    Gql.query
        "https://api.graph.cool/simple/v1/metaxdb"
        (Gql.object [ query ])
        (at [ "Card" ] decoder)


{-| Defines the sort order for a Card.
-}
order : Comparator Card
order =
    Compare.concat
        [ Compare.by (.card_type >> CardType.toInt)
        , Compare.by (.stats >> CardStats.order)
        , Compare.by .title
        , Compare.by (.effect >> .text)
        ]



-- Internals - these might be pulled out


toTitle : Card -> Html msg
toTitle card =
    div [ class "card-title" ]
        [ text card.title
        , toSubtitle card.subtitle
        , toBattleCardRank card.stats
        ]


toSubtitle : Maybe String -> Html msg
toSubtitle subtitle =
    subtitle
        |> Maybe.map (String.append " - ")
        |> Maybe.map text
        |> Maybe.withDefault Html.Helpers.nothing


toBattleCardRank : Stats -> Html msg
toBattleCardRank stats =
    CardStats.toBattleRank stats
        |> Maybe.map CardRank.toString
        |> Maybe.map ((++) " - Rank ")
        |> Maybe.map text
        |> Maybe.withDefault Html.Helpers.nothing
